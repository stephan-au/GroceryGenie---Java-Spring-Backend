package com.yougrocery.yougrocery.models;

/**
 * {@link GroceryItem.GroceryItemBuilder} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractGroceryItemGroceryItemBuilderAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class GroceryItemGroceryItemBuilderAssert extends AbstractGroceryItemGroceryItemBuilderAssert<GroceryItemGroceryItemBuilderAssert, GroceryItem.GroceryItemBuilder> {

  /**
   * Creates a new <code>{@link GroceryItemGroceryItemBuilderAssert}</code> to make assertions on actual GroceryItem.GroceryItemBuilder.
   * @param actual the GroceryItem.GroceryItemBuilder we want to make assertions on.
   */
  public GroceryItemGroceryItemBuilderAssert(GroceryItem.GroceryItemBuilder actual) {
    super(actual, GroceryItemGroceryItemBuilderAssert.class);
  }

  /**
   * An entry point for GroceryItemGroceryItemBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGroceryItem.GroceryItemBuilder)</code> and get specific assertion with code completion.
   * @param actual the GroceryItem.GroceryItemBuilder we want to make assertions on.
   * @return a new <code>{@link GroceryItemGroceryItemBuilderAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static GroceryItemGroceryItemBuilderAssert assertThat(GroceryItem.GroceryItemBuilder actual) {
    return new GroceryItemGroceryItemBuilderAssert(actual);
  }
}
